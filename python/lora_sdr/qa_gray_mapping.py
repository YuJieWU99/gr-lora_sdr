#!/usr/bin/env python
# -*- coding: utf-8 -*-
#                     GNU GENERAL PUBLIC LICENSE
#                        Version 3, 29 June 2007
#
#  Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
#  Everyone is permitted to copy and distribute verbatim copies
#  of this license document, but changing it is not allowed.


from gnuradio import gr, gr_unittest
from gnuradio import blocks
from numpy import array
from whitening_sequence import code
import pmt
import numpy as np


# from gnuradio import blocks
try:
    import gnuradio.lora_sdr as lora_sdr
   
except ImportError:
    import os
    import sys
    dirname, filename = os.path.split(os.path.abspath(__file__))
    sys.path.append(os.path.join(dirname, "bindings"))

def make_tag(key, value, offset, srcid=None):
    tag = gr.tag_t()
    tag.key = pmt.string_to_symbol(key)
    tag.value = value
    tag.offset = offset
    if srcid is not None:
        tag.srcid = pmt.to_pmt(srcid)
    return tag
   

class qa_gray_mapping(gr_unittest.TestCase):

    def setUp(self):
        self.tb = gr.top_block()

    def tearDown(self):
        self.tb = None

    # def test_instance(self):
    #     # FIXME: Test will fail until you pass sensible arguments to the constructor
    #     instance = whitening()

    def test_001_hard_decoding(self):

        sf = 7
       
        # set the payload length randomly
        payload_length = 10
        # nibbles generated by whitening block is sf bits, the maximum value of the nibble is 16
        max_value = 2**sf
        # randomly generate the nibbles output by whitening block
        src_data = np.random.randint(max_value, size=payload_length)
        soft_decoding = False

        a = pmt.make_dict()
        key1 = pmt.intern("is_header")
        is_header = pmt.from_bool(False)
        key2 = pmt.intern("sf")
        sf_tag = pmt.from_long(sf)
        a = pmt.dict_add(a, key1, is_header)
        a = pmt.dict_add(a, key2, sf_tag)
        src_tag = [make_tag('frame_info',a, 0,'src_data')]

        lora_sdr_gray_mapping = lora_sdr.gray_mapping(soft_decoding)
        blocks_vector_source = blocks.vector_source_s(src_data, False, 1, src_tag)
        blocks_vector_sink = blocks.vector_sink_s(1, 1024)

        self.tb.connect((blocks_vector_source, 0), (lora_sdr_gray_mapping, 0))
        self.tb.connect((lora_sdr_gray_mapping, 0), (blocks_vector_sink, 0))

        self.tb.run()
        result_data = blocks_vector_sink.data()
        
        ref_out = [0] * len(src_data)
        for i in range(len(src_data)):
            ref_out[i] = src_data[i] ^ (src_data[i] >> 1)

        self.assertEqual(ref_out, result_data)

if __name__ == '__main__':
    gr_unittest.run(qa_gray_mapping)
